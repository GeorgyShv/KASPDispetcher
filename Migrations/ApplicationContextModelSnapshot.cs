// <auto-generated />
using System;
using KASPDispetcher;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KASPDispetcher.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KASPDispetcher.Models.Master", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_MASTER");

                    b.HasIndex(new[] { "PositionId" }, "is_FK");

                    b.ToTable("Master", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.HasKey("PositionId")
                        .HasName("PK_POSITION");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PositionId"), false);

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("НомерДокумента")
                        .HasColumnType("int");

                    b.HasKey("ReportId")
                        .HasName("PK_REPORT");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ReportId"), false);

                    b.HasIndex(new[] { "UserId" }, "make_FK");

                    b.HasIndex(new[] { "ObjectId" }, "составляется_FK");

                    b.HasIndex(new[] { "DepartmentId" }, "формируется_FK");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.ReportState", b =>
                {
                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.HasKey("StateId")
                        .HasName("PK_Report_states");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("StateId"), false);

                    b.ToTable("Report states", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.ReportStateJournal", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StateDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReportId", "StateId")
                        .HasName("PK_REPORT STATE JOURNAL");

                    b.HasIndex(new[] { "StateId" }, "Report state journal2_FK");

                    b.HasIndex(new[] { "ReportId" }, "Report state journal_FK");

                    b.ToTable("Report state journal", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Attribute31")
                        .HasColumnType("datetime")
                        .HasColumnName("Attribute_31");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ЗанятоЧелПлан")
                        .HasColumnType("int")
                        .HasColumnName("Занято чел., план");

                    b.Property<DateTime>("ПериодКонец")
                        .HasColumnType("datetime")
                        .HasColumnName("Период, конец");

                    b.HasKey("WorkId")
                        .HasName("PK_WORK");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("WorkId"), false);

                    b.HasIndex(new[] { "ReportId" }, "consists_FK");

                    b.HasIndex(new[] { "UserId" }, "ЯвляетсяОтвИсполнителемРаботы_FK");

                    b.HasIndex(new[] { "TypeId" }, "относится_FK");

                    b.ToTable("Work", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.WorkType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("НаименованиеРаботы")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("Наименование работы");

                    b.HasKey("TypeId")
                        .HasName("PK_WORK TYPE");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("TypeId"), false);

                    b.ToTable("Work type", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.Подразделение", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId")
                        .HasName("PK_ПОДРАЗДЕЛЕНИЕ");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DepartmentId"), false);

                    b.ToTable("Подразделение", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.Помещение", b =>
                {
                    b.Property<int>("DepartmentId2")
                        .HasColumnType("int");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId2")
                        .HasName("PK_ПОМЕЩЕНИЕ");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DepartmentId2"), false);

                    b.HasIndex(new[] { "ObjectId" }, "содержит_FK");

                    b.ToTable("Помещение", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.СonstructionSite", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.HasKey("ObjectId")
                        .HasName("PK_OBJECT");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ObjectId"), false);

                    b.ToTable("Object", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorkJournal", b =>
                {
                    b.Property<int>("DepartmentId2")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId2", "WorkId")
                        .HasName("PK_WORK JOURNAL");

                    b.HasIndex(new[] { "WorkId" }, "Work journal2_FK");

                    b.HasIndex(new[] { "DepartmentId2" }, "Work journal_FK");

                    b.ToTable("Work journal", (string)null);
                });

            modelBuilder.Entity("KASPDispetcher.Models.Master", b =>
                {
                    b.HasOne("KASPDispetcher.Models.Position", "Position")
                        .WithMany("Masters")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MASTER_IS_POSITION");

                    b.HasOne("KASPDispetcher.Models.User", "User")
                        .WithMany("Masters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KASPDispetcher.Models.Report", b =>
                {
                    b.HasOne("KASPDispetcher.Models.Подразделение", "Department")
                        .WithMany("Reports")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_REPORT_ФОРМИРУЕТ_ПОДРАЗДЕ");

                    b.HasOne("KASPDispetcher.Models.СonstructionSite", "Object")
                        .WithMany("Reports")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_REPORT_СОСТАВЛЯЕ_OBJECT");

                    b.HasOne("KASPDispetcher.Models.Master", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_REPORT_MAKE_MASTER");

                    b.Navigation("Department");

                    b.Navigation("Object");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KASPDispetcher.Models.ReportStateJournal", b =>
                {
                    b.HasOne("KASPDispetcher.Models.Report", "Report")
                        .WithMany("ReportStateJournals")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_REPORT S_REPORT ST_REPORT");

                    b.HasOne("KASPDispetcher.Models.ReportState", "State")
                        .WithMany("ReportStateJournals")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_REPORT S_REPORT ST_POSITION");

                    b.Navigation("Report");

                    b.Navigation("State");
                });

            modelBuilder.Entity("KASPDispetcher.Models.User", b =>
                {
                    b.HasOne("KASPDispetcher.Models.Подразделение", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("KASPDispetcher.Models.Work", b =>
                {
                    b.HasOne("KASPDispetcher.Models.Report", "Report")
                        .WithMany("Works")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WORK_CONSISTS_REPORT");

                    b.HasOne("KASPDispetcher.Models.WorkType", "Type")
                        .WithMany("Works")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_WORK_ОТНОСИТСЯ_WORK TYP");

                    b.Navigation("Report");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KASPDispetcher.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KASPDispetcher.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KASPDispetcher.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KASPDispetcher.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkJournal", b =>
                {
                    b.HasOne("KASPDispetcher.Models.Помещение", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WORK JOU_WORK JOUR_ПОМЕЩЕНИ");

                    b.HasOne("KASPDispetcher.Models.Work", null)
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WORK JOU_WORK JOUR_WORK");
                });

            modelBuilder.Entity("KASPDispetcher.Models.Master", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("KASPDispetcher.Models.Position", b =>
                {
                    b.Navigation("Masters");
                });

            modelBuilder.Entity("KASPDispetcher.Models.Report", b =>
                {
                    b.Navigation("ReportStateJournals");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("KASPDispetcher.Models.ReportState", b =>
                {
                    b.Navigation("ReportStateJournals");
                });

            modelBuilder.Entity("KASPDispetcher.Models.User", b =>
                {
                    b.Navigation("Masters");
                });

            modelBuilder.Entity("KASPDispetcher.Models.WorkType", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("KASPDispetcher.Models.Подразделение", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("KASPDispetcher.Models.СonstructionSite", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
